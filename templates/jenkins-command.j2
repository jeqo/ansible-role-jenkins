#! /bin/bash

# copied from https://github.com/jenkinsci/docker/blob/master/jenkins.sh

set -e

# Copy files from /usr/share/jenkins/ref into {{ jenkins_home }}
# So the initial JENKINS-HOME is set with expected content.
# Don't override, as this is just a reference setup, and use from UI
# can then change this, upgrade plugins, etc.
copy_reference_file() {
	f="${1%/}"
	b="${f%.override}"
	echo "$f" >> "{{ jenkins_copy_reference_file_log }}"
	rel="${b:23}"
	dir=$(dirname "${b}")
	echo " $f -> $rel" >> "{{ jenkins_copy_reference_file_log }}"
	if [[ ! -e {{ jenkins_home }}/${rel} || $f = *.override ]]
	then
		echo "copy $rel to JENKINS_HOME" >> "{{ jenkins_copy_reference_file_log }}"
		mkdir -p "{{ jenkins_home }}/${dir:23}"
		cp -r "${f}" "{{ jenkins_home }}/${rel}";
		# pin plugins on initial copy
		[[ ${rel} == plugins/*.jpi ]] && touch "{{ jenkins_home }}/${rel}.pinned"
	fi;
}
export -f copy_reference_file
touch "{{ jenkins_copy_reference_file_log }}" || (echo "Can not write to {{ jenkins_copy_reference_file_log }}. Wrong volume permissions?" && exit 1)
echo "--- Copying files at $(date)" >> "{{ jenkins_copy_reference_file_log }}"
find {{ jenkins_reference_directory }}/ -type f -exec bash -c "copy_reference_file '{}'" \;

# if `docker run` first argument start with `--` the user is passing jenkins launcher arguments
if [[ $# -lt 1 ]] || [[ "$1" == "--"* ]]; then
  CMD=(java)
  if [ ! -z "$JAVA_OPTS" ]; then
    CMD+=("$JAVA_OPTS")
  fi
  CMD+=(-jar)
  CMD+=({{ jenkins_work }}/jenkins.war)
  if [ ! -z "$JENKINS_OPTS" ]; then
    CMD+=("$JENKINS_OPTS")
  fi
  exec "${CMD[@]}" "$@"
fi

# As argument is not jenkins, assume user want to run his own process, for sample a `bash` shell to explore this image
exec "$@"
